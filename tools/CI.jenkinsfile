#!groovy
@Library('jenkins-pipeline-lib') _

pipeline
{
  agent any
  environment
  {
    GIT_CHANGE_LOG = gitChangeLog(currentBuild.changeSets)
  }
  stages
  {
    stage('Setup')
    {
      steps
      {
        setGithubStatus('continuous-integration/jenkins/libc', 'Libc CI Build Started', 'PENDING')
      }
    }
    stage('Clean')
    {
      when
      {
        expression
        {
          /*
          * If the previous build suceeeded (unstable means test failed but build passed)
          * then we continue on in CI mode. If the previous build failed we want to
          * start with a clean environment. This is done to reduce manual user interation.
          */
          return !(didLastBuildSucceed())
        }
      }
      steps
      {
        echo('Previous build failed: Running a clean build.')
        sh 'make purify'
      }
    }
    stage('Build')
    {
      steps
      {
        sh 'make'
      }
    }
    stage('Test')
    {
      steps
      {
        sh 'make test'
      }
      post
      {
        always
        {
          // Report Tests
          junit 'buildresults/test/*.xml'
        }
      }
    }
    stage('CppCheck')
    {
      steps
      {
        sh 'make cppcheck-xml'
      }
      post
      {
        always
        {
          publishCppcheck healthy: '5', newFailureThreshold: '5', newThreshold: '1', pattern: '**/cppcheck.xml', threshold: '150', unHealthy: '200'
        }
      }
    }
    stage('Clang Analyzer')
    {
      steps
      {
        sh 'make analyze'

        warnings categoriesPattern: '', consoleParsers: [[parserName: 'Clang (LLVM based)']], defaultEncoding: '', excludePattern: '', failedNewAll: '5', failedTotalAll: '20', healthy: '', includePattern: '', messagesPattern: '', unHealthy: '', unstableNewAll: '1', unstableTotalAll: '15', useStableBuildAsReference: true
      }
      post
      {
        success
        {
          setGithubStatus('continuous-integration/jenkins/clang-analyze', 'clang-analyzer successful', 'SUCCESS')
        }
        unstable
        {
          setGithubStatus('continuous-integration/jenkins/clang-analyze', 'New clang-analyzer warnings introduced, please review and address.', 'FAILURE')
        }
        failure
        {
          setGithubStatus('continuous-integration/jenkins/clang-analyze', 'New clang-analyzer warnings exceed threshold', 'ERROR')
        }
      }
    }
    stage('Documentation')
    {
      steps
      {
        sh 'make docs'
      }
    }
    stage('Format')
    {
      steps
      {
        clangFormat()
      }
    }
  }
  post
  {
    success
    {
      setGithubStatus('continuous-integration/jenkins/libc', 'Libc CI Build Successful', 'SUCCESS')
    }
    failure
    {
      setGithubStatus('continuous-integration/jenkins/libc', 'Libc CI Build Failed', 'FAILURE')
    }
    unstable
    {
      // Unstable occurs when there are failing tests
      setGithubStatus('continuous-integration/jenkins/libc', 'Libc CI build has test failures', 'FAILURE')
    }
    aborted
    {
      echo "Build manually aborted on Jenkins"
      slackNotify('ABORTED')
      setGithubStatus('continuous-integration/jenkins/libc', 'Libc CI Build Aborted', 'ERROR')
    }
    always
    {
      slackNotify(currentBuild.currentResult)
    }
  }
}
